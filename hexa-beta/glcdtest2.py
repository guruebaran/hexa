#!/usr/bin/python
# -*- coding: utf-8 -*-
import time
import RPi.GPIO as GPIO
clra=0x00	
clrb=0x00
outval1 = [0x00,0xFC,0x24,0x24,0x24,0x18,0x00,0x00,0x00,0x18,0x24,0x24,0x24,0xFC,0x80,0x00,0x00,0x00,0x78,0x04,0x04,0x04,0x00,0x00,0x00,0x48,0x54,0x54,0x54,0x20,0x00,0x00,0x00,0x00,0x04,0x3E,0x44,0x40,0x00,0x00,0x00,0x3C,0x40,0x40,0x40,0x3C,0x00,0x00,0x00,0x0C,0x30,0x40,0x30,0x0C,0x00,0x00,0x00,0x3C,0x40,0x38,0x40,0x3C,0x00,0x00]
outval2 = outval1
outval3 = [0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00,0x00,0x1C,0xA0,0xA0,0xA0,0x7C,0x00,0x00,0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00,0x00,0x08,0x08,0x76,0x42,0x42,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x76,0x08,0x08,0x00,0x00,0x00,0x00,0x04,0x02,0x04,0x02,0x00,0x00]
outval4 = outval3
class LCD_GPIO(object):
    # Timing constants
    E_PULSE = 0.000000070  # Addess setup time 140ns
    E_DELAY = 0.000000100  # Data setup time 200ns

    def __init__(self, RST,RS,RW,E,CS1,CS2, D0, D1, D2, D3, D4, D5, D6, D7):

        #GPIO number Assignment

        self.CS1=CS1
        self.CS2=CS2
        self.RST=RST
        self.E = E
        self.RS = RS
        self.RW = RW

        self.D0 = D0
        self.D1 = D1
        self.D2 = D2
        self.D3 = D3
        self.D4 = D4
        self.D5 = D5
        self.D6 = D6
        self.D7 = D7

        GPIO.setmode(GPIO.BCM)        # Use BCM GPIO numbers

        GPIO.setup(self.E, GPIO.OUT)  # E
        GPIO.setup(self.RW, GPIO.OUT) # RW
        GPIO.setup(self.RS, GPIO.OUT) # RS

        GPIO.setup(self.D0, GPIO.OUT) # DB0
        GPIO.setup(self.D1, GPIO.OUT) # DB1
        GPIO.setup(self.D2, GPIO.OUT) # DB2
        GPIO.setup(self.D3, GPIO.OUT) # DB3
        GPIO.setup(self.D4, GPIO.OUT) # DB4
        GPIO.setup(self.D5, GPIO.OUT) # DB5
        GPIO.setup(self.D6, GPIO.OUT) # DB6
        GPIO.setup(self.D7, GPIO.OUT) # DB7

        GPIO.setup(self.CS1, GPIO.OUT) # CS1
        GPIO.setup(self.CS2, GPIO.OUT) # CS2

        GPIO.output(self.RS, 0)
        GPIO.output(self.RW, 0)
        GPIO.output(self.E, 0)
        GPIO.output(self.CS1, 0)
        GPIO.output(self.CS2, 0)
        GPIO.setup(self.RST, GPIO.OUT) # RST

        GPIO.output(self.RST, 0)
        time.sleep(0.5)
        GPIO.output(self.RST, 1)

        time.sleep(0.03)



    def useDisp1(self):
        # use Controller 1 (Display's LEFT part)
        GPIO.output(self.CS1, 1)
        GPIO.output(self.CS2, 0)

    def useDisp2(self):
        # use Controller 2 (Display's RIGHT part)
        GPIO.output(self.CS1, 0)
        GPIO.output(self.CS2, 1)


    def lcd_byte(self,value, mode):

        GPIO.output(self.RW,0)
        GPIO.output(self.RS,mode)
        GPIO.output(self.D0, (value) & 0x01)
        GPIO.output(self.D1, (value) & 0x02)
        GPIO.output(self.D2, (value) & 0x04)
        GPIO.output(self.D3, (value) & 0x08)
        GPIO.output(self.D4, (value) & 0x10)
        GPIO.output(self.D5, (value) & 0x20)
        GPIO.output(self.D6, (value) & 0x40)
        GPIO.output(self.D7, (value) & 0x80)

        # Toggle E
        time.sleep(self.E_DELAY)
        GPIO.output(self.E, True)
        time.sleep(self.E_PULSE)
        GPIO.output(self.E, False)
        time.sleep(self.E_DELAY)


        # Waiting write operation complete by listening BUSY singal

#        GPIO.setup(self.D7, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

#        GPIO.output(self.RW,1)
#        GPIO.output(self.RS,0)

#        time.sleep(self.E_DELAY)
#        GPIO.output(self.E, True)
#        time.sleep(self.E_PULSE)
#        GPIO.output(self.E, False)
#        time.sleep(self.E_DELAY)

        #Wait until BUSY(D7) is off
#        while GPIO.input(self.D7):
#          pass

#        GPIO.setup(self.D7, GPIO.OUT) # set D7 back to Output


class LCD12864(object):
    def __init__(self, driver):
        self.driver = driver
        self.lcd_init()

    def setPage(self, value):
        # set y=value * 8
        self.driver.lcd_byte(0xB8|(value&0x07),0)

    def setAddress(self, value):
        # set x=value
        self.driver.lcd_byte(0x40|(value&0x3F),0)

    def lcd_cls(self):
        # clear screen by write 0x00 to all display memory
        self.driver.useDisp1()

        for y in range(8):
          self.setPage(y)
          self.setAddress(0)
          for i in range(64):
             self.driver.lcd_byte(clra,1)

        self.driver.useDisp2()

        for y in range(8):
          self.setPage(y)
          self.setAddress(0)
          for i in range(64):
             self.driver.lcd_byte(clrb,1)

    def lcd_init(self):
        self.driver.useDisp1()
        self.driver.lcd_byte(0x3F,0)
        self.driver.useDisp2()
        self.driver.lcd_byte(0x3F,0)

    def hex(self):
        #draw the hexa logo
        self.driver.useDisp1()
        count = 0
        p = 0
        self.setPage(p)
        self.setAddress(0)

        img = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
               0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFA, 0xFE,
               0xFA, 0xF4, 0xFC, 0xF0, 0xF0, 0xE0, 0xEC, 0xFC, 0xD8, 0xC8, 0x30, 0xE0, 0xE0, 0xC0, 0x80, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF,
               0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F,
               0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF,
               0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
               0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
               0xFE, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xBF, 0x07, 0x20,
               0x20, 0x20, 0x20, 0xE0, 0xE0, 0xE0, 0xE0, 0xA0, 0x80, 0x40, 0x80, 0x00, 0x80, 0xC0, 0xC0, 0xC0,
               0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0x60, 0x60, 0x60, 0x60, 0x27, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
               0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0xC0, 0xC0, 0xC0, 0x20, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F, 0x03, 0x01, 0x01,
               0x01, 0x01, 0x00, 0x03, 0x01, 0x01, 0x03, 0x03, 0x01, 0x0E, 0x03, 0x00, 0x01, 0x01, 0x0D, 0x05,
               0x23, 0x01, 0x01, 0x03, 0x03, 0x00, 0x03, 0x03, 0x02, 0x00, 0x06, 0x07, 0xFC, 0x1F, 0x01, 0x01,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00,
               0xDE, 0x7B, 0x7B, 0xFF, 0x7B, 0xFA, 0x0B, 0x60, 0x04, 0x01, 0x75, 0xC8, 0x74, 0xFC, 0xFC, 0xFE,
               0x7C, 0xFC, 0x7C, 0xF8, 0xF8, 0xEC, 0xEC, 0x7E, 0x78, 0xFA, 0xFE, 0xBC, 0xBC, 0xB4, 0x20, 0x50,
               0x50, 0x94, 0x80, 0xC0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x44, 0x64, 0x20, 0x60, 0x70, 0x70, 0x68, 0x6C, 0x60,
               0x48, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
               0xDE, 0xFF, 0xFD, 0xFF, 0xFF, 0xFD, 0xFB, 0xFA, 0xFC, 0xF7, 0x79, 0xF8, 0xFC, 0xFF, 0xFF, 0xFB,
               0xFD, 0xF8, 0xFD, 0x3F, 0x7D, 0xFD, 0xFE, 0xAC, 0xFD, 0xFB, 0x39, 0x38, 0x79, 0xD9, 0xD3, 0xF9,
               0xCF, 0xFD, 0x1C, 0x1A, 0x1F, 0x0A, 0x8E, 0x18, 0x19, 0x18, 0x00, 0x20, 0x18, 0x00, 0x60, 0xEC,
               0x98, 0xB0, 0xC0, 0xC0, 0x01, 0x01, 0x03, 0x01, 0x00, 0x22, 0x22, 0x62, 0x62, 0x22, 0x22, 0x00,
               0x01, 0x03, 0x03, 0x03, 0x03, 0xC0, 0xF0, 0x60, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
               0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC0, 0x50,
               0xAC, 0xEF, 0xDB, 0x1F, 0x3F, 0x9B, 0xFF, 0xF7, 0xF7, 0xCF, 0xFB, 0xFF, 0xED, 0x7D, 0xBC, 0x7C,
               0x3F, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xCC, 0x7D, 0xE3, 0xFE, 0x3B, 0x63, 0x6D, 0x84,
               0x00, 0x08, 0x00, 0x00, 0x04, 0x0C, 0x10, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x01, 0x07, 0x0E, 0x1F, 0x3F, 0x7E, 0xFE, 0xBE, 0xFE, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC,
               0xFC, 0xFE, 0xFE, 0xFE, 0xDF, 0x27, 0x03, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x02, 0x02, 0x80, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x29]
        for byt in img:

            count = count+1
#            print ("count=",count,":p=",p,":byte=",byt)
            if (count%64 == 0):
                self.driver.lcd_byte(byt,1)
                if GPIO.input(self.driver.CS1):
#                    print("cs1=",GPIO.input(self.driver.CS1))
                    self.driver.useDisp2()
#                    print("cs1=",GPIO.input(self.driver.CS1))
                else:
                    self.driver.useDisp1()
                    p = p + 1
                self.setPage(p)
                self.setAddress(0)

            else:
#                print ("count=",count,":p=",p,":byte=",byt)
                self.driver.lcd_byte(byt,1)


    def lcd_picdemo(self):
        #draw a 16x16 sprite
        self.driver.useDisp1()

        self.setPage(0)
        self.setAddress(0)
        self.driver.lcd_byte(0x00,1)
        self.driver.lcd_byte(0xD0,1)
        self.driver.lcd_byte(0x30,1)
        self.driver.lcd_byte(0x93,1)
        self.driver.lcd_byte(0xDF,1)
        self.driver.lcd_byte(0xB7,1)
        self.driver.lcd_byte(0x77,1)
        self.driver.lcd_byte(0x17,1)
        self.driver.lcd_byte(0x17,1)
        self.driver.lcd_byte(0x77,1)
        self.driver.lcd_byte(0xB7,1)
        self.driver.lcd_byte(0xDF,1)
        self.driver.lcd_byte(0x33,1)
        self.driver.lcd_byte(0xD0,1)
        self.driver.lcd_byte(0x10,1)

        self.setPage(1)
        self.setAddress(0)
        self.driver.lcd_byte(0x04,1)
        self.driver.lcd_byte(0x0A,1)
        self.driver.lcd_byte(0x0B,1)
        self.driver.lcd_byte(0x07,1)
        self.driver.lcd_byte(0x0F,1)
        self.driver.lcd_byte(0xFF,1)
        self.driver.lcd_byte(0x71,1)
        self.driver.lcd_byte(0x71,1)
        self.driver.lcd_byte(0xF1,1)
        self.driver.lcd_byte(0xBF,1)
        self.driver.lcd_byte(0x7F,1)
        self.driver.lcd_byte(0x1F,1)
        self.driver.lcd_byte(0x0F,1)
        self.driver.lcd_byte(0x17,1)
        self.driver.lcd_byte(0x16,1)
        self.driver.lcd_byte(0x08,1)

def demo():
    driver = LCD_GPIO(RS=25,RW=7,E=21,D0=5,D1=6,D2=13,D3=19,D4=26,D5=12,D6=16,D7=20,CS1=24,CS2=23,RST=18)
    #5,6,13,19,26,12,16,20
    lcd = LCD12864(driver=driver)
    #lcd.lcd_cls()
    lcd.driver.useDisp1()
    p = 0
    n = 1
    global outval1
    global outval2
#-------------------------
    lcd.setPage(p)
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(1*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#--------------------------
    lcd.setPage(p+(2*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(3*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#---------------------------
    lcd.setPage(p+(4*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(5*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#----------------------------
    lcd.setPage(p+(6*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(7*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#-----------------------------
    lcd.driver.useDisp2()
    p = 0
    n = 1
    outval1=outval3
    outval2=outval4
#-------------------------
    lcd.setPage(p)
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(1*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#--------------------------
    lcd.setPage(p+(2*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(1*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#--------------------------
    lcd.setPage(p+(2*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(3*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#---------------------------
    lcd.setPage(p+(4*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(5*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#----------------------------
    lcd.setPage(p+(6*n))
    lcd.setAddress(0)
    for i in outval1:
        lcd.driver.lcd_byte(i,1)
    lcd.setPage(p+(7*n))
    lcd.setAddress(0)
    for i in outval2:
        lcd.driver.lcd_byte(i,1)
#-----------------------------

   # lcd.lcd_picdemo()

    time.sleep(3);

def demo2():
    driver = LCD_GPIO(RS=25,RW=7,E=21,D0=5,D1=6,D2=13,D3=19,D4=26,D5=12,D6=16,D7=20,CS1=24,CS2=23,RST=18)
    #5,6,13,19,26,12,16,20
    lcd = LCD12864(driver=driver)
    lcd.lcd_cls()
    lcd.hex()
    time.sleep(3);


def main():
    demo2()
#    GPIO.cleanup()

if __name__ == "__main__":
    main()

